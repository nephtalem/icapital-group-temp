/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query home {\n    home {\n      data {\n        attributes {\n          createdAt\n          menu\n          publishedAt\n          slides {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            cta\n            ctaLink\n            description\n            title\n            id\n          }\n          slogan\n        }\n      }\n    }\n  }\n": types.HomeDocument,
    "\n  query knowledgeSharing {\n    knowledgeSharing {\n      data {\n        attributes {\n          intro\n          quote\n          quoteAuthor\n          platform {\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            enableApplication\n            enableRegistration\n            themeColor\n            title\n          }\n        }\n      }\n    }\n  }\n": types.KnowledgeSharingDocument,
    "\n  query summits($filters: SummitFiltersInput!) {\n    summits(filters: $filters) {\n      data {\n        attributes {\n          date\n          slug\n          background {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          intro {\n            fullDescription\n            shortDescription\n            title\n            youtubeUrl\n          }\n          name\n          openingRemark {\n            name\n            picture {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            position\n            remark\n            speechFile {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            youtubeUrl\n          }\n          slogan\n          status\n          session {\n            description\n            sessionVideo {\n              description\n              title\n              youtubeUrl\n            }\n            title\n          }\n          organizer {\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          organizerIntro\n          sponsor {\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          sponsorIntro\n        }\n      }\n    }\n  }\n": types.SummitsDocument,
    "\n  query upcomingEafs {\n    upcomingEafs {\n      data {\n        attributes {\n          enabled\n          content {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            intro\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            menuTitle\n            organizer {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            organizerIntro\n            sponsor {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            sponsorIntro\n            title\n            youtubeUrl\n          }\n        }\n      }\n    }\n  }\n": types.UpcomingEafsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query home {\n    home {\n      data {\n        attributes {\n          createdAt\n          menu\n          publishedAt\n          slides {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            cta\n            ctaLink\n            description\n            title\n            id\n          }\n          slogan\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query home {\n    home {\n      data {\n        attributes {\n          createdAt\n          menu\n          publishedAt\n          slides {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            cta\n            ctaLink\n            description\n            title\n            id\n          }\n          slogan\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query knowledgeSharing {\n    knowledgeSharing {\n      data {\n        attributes {\n          intro\n          quote\n          quoteAuthor\n          platform {\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            enableApplication\n            enableRegistration\n            themeColor\n            title\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query knowledgeSharing {\n    knowledgeSharing {\n      data {\n        attributes {\n          intro\n          quote\n          quoteAuthor\n          platform {\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            enableApplication\n            enableRegistration\n            themeColor\n            title\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query summits($filters: SummitFiltersInput!) {\n    summits(filters: $filters) {\n      data {\n        attributes {\n          date\n          slug\n          background {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          intro {\n            fullDescription\n            shortDescription\n            title\n            youtubeUrl\n          }\n          name\n          openingRemark {\n            name\n            picture {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            position\n            remark\n            speechFile {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            youtubeUrl\n          }\n          slogan\n          status\n          session {\n            description\n            sessionVideo {\n              description\n              title\n              youtubeUrl\n            }\n            title\n          }\n          organizer {\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          organizerIntro\n          sponsor {\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          sponsorIntro\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query summits($filters: SummitFiltersInput!) {\n    summits(filters: $filters) {\n      data {\n        attributes {\n          date\n          slug\n          background {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          intro {\n            fullDescription\n            shortDescription\n            title\n            youtubeUrl\n          }\n          name\n          openingRemark {\n            name\n            picture {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            position\n            remark\n            speechFile {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            youtubeUrl\n          }\n          slogan\n          status\n          session {\n            description\n            sessionVideo {\n              description\n              title\n              youtubeUrl\n            }\n            title\n          }\n          organizer {\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          organizerIntro\n          sponsor {\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          sponsorIntro\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query upcomingEafs {\n    upcomingEafs {\n      data {\n        attributes {\n          enabled\n          content {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            intro\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            menuTitle\n            organizer {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            organizerIntro\n            sponsor {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            sponsorIntro\n            title\n            youtubeUrl\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query upcomingEafs {\n    upcomingEafs {\n      data {\n        attributes {\n          enabled\n          content {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            intro\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            menuTitle\n            organizer {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            organizerIntro\n            sponsor {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            sponsorIntro\n            title\n            youtubeUrl\n          }\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;