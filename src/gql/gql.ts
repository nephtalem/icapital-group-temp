/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query advisorySolutions {\n    advisorySolutions(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          callToAction\n          description\n          createdAt\n          publishedAt\n          updatedAt\n          youtubeUrl\n          clients {\n            id\n            logo {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          solution {\n            id\n            title\n            icon {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n            SolutionPoint {\n              id\n              point\n            }\n          }\n        }\n      }\n    }\n  }\n": types.AdvisorySolutionsDocument,
    "\n  query blogById($blogId: ID) {\n    blog(id: $blogId) {\n      data {\n        id\n        attributes {\n          hits\n        }\n      }\n    }\n  }\n": types.BlogByIdDocument,
    "\n  query blog($filters: BlogFiltersInput) {\n    blogs(filters: $filters, publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          content\n          description\n          slug\n          tags\n          title\n          hits\n          updatedAt\n          publishedAt\n          author {\n            data {\n              id\n              attributes {\n                name\n                email\n                createdAt\n                position\n                publishedAt\n                updatedAt\n              }\n            }\n          }\n          createdAt\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.BlogDocument,
    "\n  query blogs {\n    blogs(publicationState: LIVE) {\n      meta {\n        pagination {\n          page\n          pageCount\n          pageSize\n          total\n        }\n      }\n      data {\n        id\n        attributes {\n          content\n          description\n          slug\n          tags\n          title\n          hits\n          updatedAt\n          publishedAt\n          author {\n            data {\n              id\n              attributes {\n                name\n                email\n                createdAt\n                position\n                publishedAt\n                updatedAt\n              }\n            }\n          }\n          createdAt\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.BlogsDocument,
    "\n  mutation updateBlog($updateBlogId: ID!, $data: BlogInput!) {\n    updateBlog(id: $updateBlogId, data: $data) {\n      data {\n        id\n      }\n    }\n  }\n": types.UpdateBlogDocument,
    "\n  query crossBorderSolutions {\n    crossBorderSolutions(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          youtubeUrl\n          updatedAt\n          publishedAt\n          description\n          createdAt\n          CBSPoint {\n            description\n            id\n            title\n          }\n          callToAction\n          CertificationPackage {\n            description\n            id\n            image {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          clients {\n            id\n            name\n            url\n            logo {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          partners {\n            id\n            name\n            url\n            logo {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    exposureLearningPrograms(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          createdAt\n          publishedAt\n          updatedAt\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          ExposureProgram {\n            id\n            title\n            points {\n              id\n              content\n            }\n          }\n        }\n      }\n    }\n  }\n": types.CrossBorderSolutionsDocument,
    "\n  query home {\n    home {\n      data {\n        attributes {\n          createdAt\n          menu\n          publishedAt\n          slides {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            cta\n            ctaLink\n            description\n            title\n            id\n          }\n          slogan\n        }\n      }\n    }\n  }\n": types.HomeDocument,
    "\n  query applyEafs {\n    applyEafs {\n      data {\n        attributes {\n          createdAt\n          description\n          logo {\n            data {\n              attributes {\n                url\n                width\n                height\n              }\n            }\n          }\n          message\n          title\n        }\n      }\n    }\n  }\n": types.ApplyEafsDocument,
    "\n  mutation createParticipant($data: ParticipantInput!) {\n    createParticipant(data: $data) {\n      data {\n        id\n      }\n    }\n  }\n": types.CreateParticipantDocument,
    "\n  mutation createSponsorExhibitor($data: SponsorExhibitorInput!) {\n    createSponsorExhibitor(data: $data) {\n      data {\n        id\n      }\n    }\n  }\n": types.CreateSponsorExhibitorDocument,
    "\n  query documents($filters: DocumentFiltersInput!) {\n    documents(filters: $filters) {\n      data {\n        attributes {\n          category {\n            name\n            file {\n              name\n              content {\n                data {\n                  attributes {\n                    ext\n                    url\n                  }\n                }\n              }\n            }\n          }\n          name\n          date\n          background {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          slug\n          status\n          type\n        }\n      }\n    }\n  }\n": types.DocumentsDocument,
    "\n  query knowledgeSharing {\n    knowledgeSharing(publicationState: LIVE) {\n      data {\n        attributes {\n          intro\n          quote\n          quoteAuthor\n          platform {\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            enableApplication\n            enableRegistration\n            themeColor\n            title\n          }\n        }\n      }\n    }\n  }\n": types.KnowledgeSharingDocument,
    "\n  query registrationEafs {\n    registrationEafs {\n      data {\n        attributes {\n          createdAt\n          description\n          logo {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          name\n          points {\n            content\n          }\n          pricing {\n            price\n            size\n          }\n          title\n        }\n      }\n    }\n  }\n": types.RegistrationEafsDocument,
    "\n  query summits($filters: SummitFiltersInput!) {\n    summits(filters: $filters) {\n      data {\n        attributes {\n          date\n          slug\n          type\n          background {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          intro {\n            fullDescription\n            shortDescription\n            title\n            youtubeUrl\n          }\n          name\n          openingRemark {\n            name\n            picture {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            position\n            remark\n            speechFile {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            youtubeUrl\n          }\n          slogan\n          status\n          session {\n            description\n            sessionVideo {\n              description\n              title\n              youtubeUrl\n            }\n            title\n          }\n          organizer {\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          organizerIntro\n          sponsor {\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          sponsorIntro\n        }\n      }\n    }\n  }\n": types.SummitsDocument,
    "\n  query upcomingChcda {\n    upcomingChcda {\n      data {\n        attributes {\n          enabled\n          content {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            intro\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            menuTitle\n            organizer {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            organizerIntro\n            sponsor {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            sponsorIntro\n            title\n            youtubeUrl\n          }\n        }\n      }\n    }\n  }\n": types.UpcomingChcdaDocument,
    "\n  query upcomingEacms {\n    upcomingEacms {\n      data {\n        attributes {\n          enabled\n          content {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            intro\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            menuTitle\n            organizer {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            organizerIntro\n            sponsor {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            sponsorIntro\n            title\n            youtubeUrl\n          }\n        }\n      }\n    }\n  }\n": types.UpcomingEacmsDocument,
    "\n  query upcomingEafs {\n    upcomingEafs {\n      data {\n        attributes {\n          enabled\n          content {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            intro\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            menuTitle\n            organizer {\n              logo {\n                data {\n                  attributes {\n                    url\n                    height\n                    width\n                  }\n                }\n              }\n              name\n              url\n            }\n            organizerIntro\n            sponsor {\n              logo {\n                data {\n                  attributes {\n                    url\n                    height\n                    width\n                  }\n                }\n              }\n              name\n              url\n              level\n            }\n            sponsorIntro\n            title\n            youtubeUrl\n          }\n          exhibitor {\n            logo {\n              data {\n                attributes {\n                  url\n                  height\n                  width\n                }\n              }\n            }\n            name\n            url\n          }\n          guests {\n            name\n            picture {\n              data {\n                attributes {\n                  url\n                  height\n                  width\n                }\n              }\n            }\n            position\n            bio\n            honourable\n          }\n          introDocument {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          introVideo\n          session {\n            moderator {\n              name\n              picture {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n\n              position\n            }\n            speaker {\n              name\n              picture {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              document {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              position\n              type\n              bio\n            }\n            title\n            points {\n              content\n            }\n          }\n          strategicPartner {\n            logo {\n              data {\n                attributes {\n                  url\n                  height\n                  width\n                }\n              }\n            }\n            name\n            url\n          }\n          eafsSetting {\n            order\n            published\n            sectionName\n            title\n          }\n          statstics {\n            amount\n            color\n            label\n            order\n            icon {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.UpcomingEafsDocument,
    "\n  query LearningSolutions {\n    learningSolutions(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          youtubeUrl\n          updatedAt\n          publishedAt\n          LSBanner {\n            callToAction\n            callToActionLink\n            id\n            image {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          callToAction\n          clients {\n            id\n            name\n            url\n            logo {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          createdAt\n          description\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          solution {\n            icon {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n            id\n            title\n            SolutionPoint {\n              id\n              point\n            }\n          }\n        }\n      }\n    }\n  }\n": types.LearningSolutionsDocument,
    "\n  query whoWeAre {\n    whoWeAre(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          ClientCounter {\n            id\n            name\n            value\n          }\n          Intro {\n            description\n            fullName\n            id\n            position\n            title\n            image {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          VisionMissionValue {\n            id\n            title\n            description\n            icon {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          WordAnimation {\n            title\n            id\n            WordAnimationItem {\n              id\n              title\n              words\n            }\n          }\n          banner {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          clientCounterTitle\n          createdAt\n          publishedAt\n          updatedAt\n          visionMissionValueBackground {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.WhoWeAreDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query advisorySolutions {\n    advisorySolutions(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          callToAction\n          description\n          createdAt\n          publishedAt\n          updatedAt\n          youtubeUrl\n          clients {\n            id\n            logo {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          solution {\n            id\n            title\n            icon {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n            SolutionPoint {\n              id\n              point\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query advisorySolutions {\n    advisorySolutions(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          callToAction\n          description\n          createdAt\n          publishedAt\n          updatedAt\n          youtubeUrl\n          clients {\n            id\n            logo {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          solution {\n            id\n            title\n            icon {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n            SolutionPoint {\n              id\n              point\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query blogById($blogId: ID) {\n    blog(id: $blogId) {\n      data {\n        id\n        attributes {\n          hits\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query blogById($blogId: ID) {\n    blog(id: $blogId) {\n      data {\n        id\n        attributes {\n          hits\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query blog($filters: BlogFiltersInput) {\n    blogs(filters: $filters, publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          content\n          description\n          slug\n          tags\n          title\n          hits\n          updatedAt\n          publishedAt\n          author {\n            data {\n              id\n              attributes {\n                name\n                email\n                createdAt\n                position\n                publishedAt\n                updatedAt\n              }\n            }\n          }\n          createdAt\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query blog($filters: BlogFiltersInput) {\n    blogs(filters: $filters, publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          content\n          description\n          slug\n          tags\n          title\n          hits\n          updatedAt\n          publishedAt\n          author {\n            data {\n              id\n              attributes {\n                name\n                email\n                createdAt\n                position\n                publishedAt\n                updatedAt\n              }\n            }\n          }\n          createdAt\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query blogs {\n    blogs(publicationState: LIVE) {\n      meta {\n        pagination {\n          page\n          pageCount\n          pageSize\n          total\n        }\n      }\n      data {\n        id\n        attributes {\n          content\n          description\n          slug\n          tags\n          title\n          hits\n          updatedAt\n          publishedAt\n          author {\n            data {\n              id\n              attributes {\n                name\n                email\n                createdAt\n                position\n                publishedAt\n                updatedAt\n              }\n            }\n          }\n          createdAt\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query blogs {\n    blogs(publicationState: LIVE) {\n      meta {\n        pagination {\n          page\n          pageCount\n          pageSize\n          total\n        }\n      }\n      data {\n        id\n        attributes {\n          content\n          description\n          slug\n          tags\n          title\n          hits\n          updatedAt\n          publishedAt\n          author {\n            data {\n              id\n              attributes {\n                name\n                email\n                createdAt\n                position\n                publishedAt\n                updatedAt\n              }\n            }\n          }\n          createdAt\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateBlog($updateBlogId: ID!, $data: BlogInput!) {\n    updateBlog(id: $updateBlogId, data: $data) {\n      data {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateBlog($updateBlogId: ID!, $data: BlogInput!) {\n    updateBlog(id: $updateBlogId, data: $data) {\n      data {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query crossBorderSolutions {\n    crossBorderSolutions(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          youtubeUrl\n          updatedAt\n          publishedAt\n          description\n          createdAt\n          CBSPoint {\n            description\n            id\n            title\n          }\n          callToAction\n          CertificationPackage {\n            description\n            id\n            image {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          clients {\n            id\n            name\n            url\n            logo {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          partners {\n            id\n            name\n            url\n            logo {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    exposureLearningPrograms(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          createdAt\n          publishedAt\n          updatedAt\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          ExposureProgram {\n            id\n            title\n            points {\n              id\n              content\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query crossBorderSolutions {\n    crossBorderSolutions(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          youtubeUrl\n          updatedAt\n          publishedAt\n          description\n          createdAt\n          CBSPoint {\n            description\n            id\n            title\n          }\n          callToAction\n          CertificationPackage {\n            description\n            id\n            image {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n          }\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          clients {\n            id\n            name\n            url\n            logo {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          partners {\n            id\n            name\n            url\n            logo {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    exposureLearningPrograms(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          createdAt\n          publishedAt\n          updatedAt\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          ExposureProgram {\n            id\n            title\n            points {\n              id\n              content\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query home {\n    home {\n      data {\n        attributes {\n          createdAt\n          menu\n          publishedAt\n          slides {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            cta\n            ctaLink\n            description\n            title\n            id\n          }\n          slogan\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query home {\n    home {\n      data {\n        attributes {\n          createdAt\n          menu\n          publishedAt\n          slides {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            cta\n            ctaLink\n            description\n            title\n            id\n          }\n          slogan\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query applyEafs {\n    applyEafs {\n      data {\n        attributes {\n          createdAt\n          description\n          logo {\n            data {\n              attributes {\n                url\n                width\n                height\n              }\n            }\n          }\n          message\n          title\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query applyEafs {\n    applyEafs {\n      data {\n        attributes {\n          createdAt\n          description\n          logo {\n            data {\n              attributes {\n                url\n                width\n                height\n              }\n            }\n          }\n          message\n          title\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createParticipant($data: ParticipantInput!) {\n    createParticipant(data: $data) {\n      data {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createParticipant($data: ParticipantInput!) {\n    createParticipant(data: $data) {\n      data {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createSponsorExhibitor($data: SponsorExhibitorInput!) {\n    createSponsorExhibitor(data: $data) {\n      data {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createSponsorExhibitor($data: SponsorExhibitorInput!) {\n    createSponsorExhibitor(data: $data) {\n      data {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query documents($filters: DocumentFiltersInput!) {\n    documents(filters: $filters) {\n      data {\n        attributes {\n          category {\n            name\n            file {\n              name\n              content {\n                data {\n                  attributes {\n                    ext\n                    url\n                  }\n                }\n              }\n            }\n          }\n          name\n          date\n          background {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          slug\n          status\n          type\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query documents($filters: DocumentFiltersInput!) {\n    documents(filters: $filters) {\n      data {\n        attributes {\n          category {\n            name\n            file {\n              name\n              content {\n                data {\n                  attributes {\n                    ext\n                    url\n                  }\n                }\n              }\n            }\n          }\n          name\n          date\n          background {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          slug\n          status\n          type\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query knowledgeSharing {\n    knowledgeSharing(publicationState: LIVE) {\n      data {\n        attributes {\n          intro\n          quote\n          quoteAuthor\n          platform {\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            enableApplication\n            enableRegistration\n            themeColor\n            title\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query knowledgeSharing {\n    knowledgeSharing(publicationState: LIVE) {\n      data {\n        attributes {\n          intro\n          quote\n          quoteAuthor\n          platform {\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            enableApplication\n            enableRegistration\n            themeColor\n            title\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query registrationEafs {\n    registrationEafs {\n      data {\n        attributes {\n          createdAt\n          description\n          logo {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          name\n          points {\n            content\n          }\n          pricing {\n            price\n            size\n          }\n          title\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query registrationEafs {\n    registrationEafs {\n      data {\n        attributes {\n          createdAt\n          description\n          logo {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          name\n          points {\n            content\n          }\n          pricing {\n            price\n            size\n          }\n          title\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query summits($filters: SummitFiltersInput!) {\n    summits(filters: $filters) {\n      data {\n        attributes {\n          date\n          slug\n          type\n          background {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          intro {\n            fullDescription\n            shortDescription\n            title\n            youtubeUrl\n          }\n          name\n          openingRemark {\n            name\n            picture {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            position\n            remark\n            speechFile {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            youtubeUrl\n          }\n          slogan\n          status\n          session {\n            description\n            sessionVideo {\n              description\n              title\n              youtubeUrl\n            }\n            title\n          }\n          organizer {\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          organizerIntro\n          sponsor {\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          sponsorIntro\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query summits($filters: SummitFiltersInput!) {\n    summits(filters: $filters) {\n      data {\n        attributes {\n          date\n          slug\n          type\n          background {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          intro {\n            fullDescription\n            shortDescription\n            title\n            youtubeUrl\n          }\n          name\n          openingRemark {\n            name\n            picture {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            position\n            remark\n            speechFile {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            youtubeUrl\n          }\n          slogan\n          status\n          session {\n            description\n            sessionVideo {\n              description\n              title\n              youtubeUrl\n            }\n            title\n          }\n          organizer {\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          organizerIntro\n          sponsor {\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            name\n            url\n          }\n          sponsorIntro\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query upcomingChcda {\n    upcomingChcda {\n      data {\n        attributes {\n          enabled\n          content {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            intro\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            menuTitle\n            organizer {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            organizerIntro\n            sponsor {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            sponsorIntro\n            title\n            youtubeUrl\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query upcomingChcda {\n    upcomingChcda {\n      data {\n        attributes {\n          enabled\n          content {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            intro\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            menuTitle\n            organizer {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            organizerIntro\n            sponsor {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            sponsorIntro\n            title\n            youtubeUrl\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query upcomingEacms {\n    upcomingEacms {\n      data {\n        attributes {\n          enabled\n          content {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            intro\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            menuTitle\n            organizer {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            organizerIntro\n            sponsor {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            sponsorIntro\n            title\n            youtubeUrl\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query upcomingEacms {\n    upcomingEacms {\n      data {\n        attributes {\n          enabled\n          content {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            intro\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            menuTitle\n            organizer {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            organizerIntro\n            sponsor {\n              logo {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              name\n              url\n            }\n            sponsorIntro\n            title\n            youtubeUrl\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query upcomingEafs {\n    upcomingEafs {\n      data {\n        attributes {\n          enabled\n          content {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            intro\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            menuTitle\n            organizer {\n              logo {\n                data {\n                  attributes {\n                    url\n                    height\n                    width\n                  }\n                }\n              }\n              name\n              url\n            }\n            organizerIntro\n            sponsor {\n              logo {\n                data {\n                  attributes {\n                    url\n                    height\n                    width\n                  }\n                }\n              }\n              name\n              url\n              level\n            }\n            sponsorIntro\n            title\n            youtubeUrl\n          }\n          exhibitor {\n            logo {\n              data {\n                attributes {\n                  url\n                  height\n                  width\n                }\n              }\n            }\n            name\n            url\n          }\n          guests {\n            name\n            picture {\n              data {\n                attributes {\n                  url\n                  height\n                  width\n                }\n              }\n            }\n            position\n            bio\n            honourable\n          }\n          introDocument {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          introVideo\n          session {\n            moderator {\n              name\n              picture {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n\n              position\n            }\n            speaker {\n              name\n              picture {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              document {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              position\n              type\n              bio\n            }\n            title\n            points {\n              content\n            }\n          }\n          strategicPartner {\n            logo {\n              data {\n                attributes {\n                  url\n                  height\n                  width\n                }\n              }\n            }\n            name\n            url\n          }\n          eafsSetting {\n            order\n            published\n            sectionName\n            title\n          }\n          statstics {\n            amount\n            color\n            label\n            order\n            icon {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query upcomingEafs {\n    upcomingEafs {\n      data {\n        attributes {\n          enabled\n          content {\n            background {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            banner {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            description\n            intro\n            logo {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            menuTitle\n            organizer {\n              logo {\n                data {\n                  attributes {\n                    url\n                    height\n                    width\n                  }\n                }\n              }\n              name\n              url\n            }\n            organizerIntro\n            sponsor {\n              logo {\n                data {\n                  attributes {\n                    url\n                    height\n                    width\n                  }\n                }\n              }\n              name\n              url\n              level\n            }\n            sponsorIntro\n            title\n            youtubeUrl\n          }\n          exhibitor {\n            logo {\n              data {\n                attributes {\n                  url\n                  height\n                  width\n                }\n              }\n            }\n            name\n            url\n          }\n          guests {\n            name\n            picture {\n              data {\n                attributes {\n                  url\n                  height\n                  width\n                }\n              }\n            }\n            position\n            bio\n            honourable\n          }\n          introDocument {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          introVideo\n          session {\n            moderator {\n              name\n              picture {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n\n              position\n            }\n            speaker {\n              name\n              picture {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              document {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              position\n              type\n              bio\n            }\n            title\n            points {\n              content\n            }\n          }\n          strategicPartner {\n            logo {\n              data {\n                attributes {\n                  url\n                  height\n                  width\n                }\n              }\n            }\n            name\n            url\n          }\n          eafsSetting {\n            order\n            published\n            sectionName\n            title\n          }\n          statstics {\n            amount\n            color\n            label\n            order\n            icon {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LearningSolutions {\n    learningSolutions(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          youtubeUrl\n          updatedAt\n          publishedAt\n          LSBanner {\n            callToAction\n            callToActionLink\n            id\n            image {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          callToAction\n          clients {\n            id\n            name\n            url\n            logo {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          createdAt\n          description\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          solution {\n            icon {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n            id\n            title\n            SolutionPoint {\n              id\n              point\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query LearningSolutions {\n    learningSolutions(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          youtubeUrl\n          updatedAt\n          publishedAt\n          LSBanner {\n            callToAction\n            callToActionLink\n            id\n            image {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          callToAction\n          clients {\n            id\n            name\n            url\n            logo {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          createdAt\n          description\n          image {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          solution {\n            icon {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n            id\n            title\n            SolutionPoint {\n              id\n              point\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query whoWeAre {\n    whoWeAre(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          ClientCounter {\n            id\n            name\n            value\n          }\n          Intro {\n            description\n            fullName\n            id\n            position\n            title\n            image {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          VisionMissionValue {\n            id\n            title\n            description\n            icon {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          WordAnimation {\n            title\n            id\n            WordAnimationItem {\n              id\n              title\n              words\n            }\n          }\n          banner {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          clientCounterTitle\n          createdAt\n          publishedAt\n          updatedAt\n          visionMissionValueBackground {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query whoWeAre {\n    whoWeAre(publicationState: LIVE) {\n      data {\n        id\n        attributes {\n          ClientCounter {\n            id\n            name\n            value\n          }\n          Intro {\n            description\n            fullName\n            id\n            position\n            title\n            image {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          VisionMissionValue {\n            id\n            title\n            description\n            icon {\n              data {\n                id\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          WordAnimation {\n            title\n            id\n            WordAnimationItem {\n              id\n              title\n              words\n            }\n          }\n          banner {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n          clientCounterTitle\n          createdAt\n          publishedAt\n          updatedAt\n          visionMissionValueBackground {\n            data {\n              id\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;