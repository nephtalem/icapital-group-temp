"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input ComponentCategoryCategoryFiltersInput {
  name: StringFilterInput
  file: ComponentFileFileFiltersInput
  and: [ComponentCategoryCategoryFiltersInput]
  or: [ComponentCategoryCategoryFiltersInput]
  not: ComponentCategoryCategoryFiltersInput
}

input ComponentCategoryCategoryInput {
  id: ID
  name: String
  file: [ComponentFileFileInput]
}

type ComponentCategoryCategory {
  id: ID!
  name: String
  file(filters: ComponentFileFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentFileFile]
}

input ComponentFileFileFiltersInput {
  name: StringFilterInput
  and: [ComponentFileFileFiltersInput]
  or: [ComponentFileFileFiltersInput]
  not: ComponentFileFileFiltersInput
}

input ComponentFileFileInput {
  id: ID
  name: String
  content: ID
}

type ComponentFileFile {
  id: ID!
  name: String
  content: UploadFileEntityResponse
}

input ComponentOpeningRemarkOpeningRemarkFiltersInput {
  name: StringFilterInput
  position: StringFilterInput
  youtubeUrl: StringFilterInput
  remark: StringFilterInput
  and: [ComponentOpeningRemarkOpeningRemarkFiltersInput]
  or: [ComponentOpeningRemarkOpeningRemarkFiltersInput]
  not: ComponentOpeningRemarkOpeningRemarkFiltersInput
}

input ComponentOpeningRemarkOpeningRemarkInput {
  id: ID
  picture: ID
  name: String
  position: String
  speechFile: ID
  youtubeUrl: String
  remark: String
}

type ComponentOpeningRemarkOpeningRemark {
  id: ID!
  picture: UploadFileEntityResponse
  name: String
  position: String
  speechFile: UploadFileEntityResponse
  youtubeUrl: String
  remark: String
}

input ComponentOrganizerOrganizerFiltersInput {
  name: StringFilterInput
  url: StringFilterInput
  and: [ComponentOrganizerOrganizerFiltersInput]
  or: [ComponentOrganizerOrganizerFiltersInput]
  not: ComponentOrganizerOrganizerFiltersInput
}

input ComponentOrganizerOrganizerInput {
  id: ID
  logo: ID
  name: String
  url: String
}

type ComponentOrganizerOrganizer {
  id: ID!
  logo: UploadFileEntityResponse
  name: String
  url: String
}

type ComponentOrganizerSponsor {
  id: ID!
}

input ComponentPlatformPlatformFiltersInput {
  title: StringFilterInput
  description: StringFilterInput
  enableRegistration: BooleanFilterInput
  enableApplication: BooleanFilterInput
  themeColor: StringFilterInput
  and: [ComponentPlatformPlatformFiltersInput]
  or: [ComponentPlatformPlatformFiltersInput]
  not: ComponentPlatformPlatformFiltersInput
}

input ComponentPlatformPlatformInput {
  id: ID
  banner: ID
  title: String
  description: String
  enableRegistration: Boolean
  enableApplication: Boolean
  themeColor: String
}

type ComponentPlatformPlatform {
  id: ID!
  banner: UploadFileEntityResponse
  title: String
  description: String
  enableRegistration: Boolean
  enableApplication: Boolean
  themeColor: String
}

input ComponentSessionVideoVideoFiltersInput {
  title: StringFilterInput
  description: StringFilterInput
  youtubeUrl: StringFilterInput
  and: [ComponentSessionVideoVideoFiltersInput]
  or: [ComponentSessionVideoVideoFiltersInput]
  not: ComponentSessionVideoVideoFiltersInput
}

input ComponentSessionVideoVideoInput {
  id: ID
  title: String
  description: String
  youtubeUrl: String
}

type ComponentSessionVideoVideo {
  id: ID!
  title: String
  description: String
  youtubeUrl: String
}

input ComponentSessionSessionFiltersInput {
  title: StringFilterInput
  description: StringFilterInput
  sessionVideo: ComponentSessionVideoVideoFiltersInput
  and: [ComponentSessionSessionFiltersInput]
  or: [ComponentSessionSessionFiltersInput]
  not: ComponentSessionSessionFiltersInput
}

input ComponentSessionSessionInput {
  id: ID
  title: String
  description: String
  sessionVideo: [ComponentSessionVideoVideoInput]
}

type ComponentSessionSession {
  id: ID!
  title: String
  description: String
  sessionVideo(filters: ComponentSessionVideoVideoFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSessionVideoVideo]
}

input ComponentSlideSlideFiltersInput {
  title: StringFilterInput
  description: StringFilterInput
  cta: StringFilterInput
  ctaLink: StringFilterInput
  and: [ComponentSlideSlideFiltersInput]
  or: [ComponentSlideSlideFiltersInput]
  not: ComponentSlideSlideFiltersInput
}

input ComponentSlideSlideInput {
  id: ID
  title: String
  description: String
  cta: String
  ctaLink: String
  background: ID
}

type ComponentSlideSlide {
  id: ID!
  title: String
  description: String
  cta: String
  ctaLink: String
  background: UploadFileEntityResponse
}

input ComponentSponsorSponsorFiltersInput {
  name: StringFilterInput
  url: StringFilterInput
  and: [ComponentSponsorSponsorFiltersInput]
  or: [ComponentSponsorSponsorFiltersInput]
  not: ComponentSponsorSponsorFiltersInput
}

input ComponentSponsorSponsorInput {
  id: ID
  logo: ID
  name: String
  url: String
}

type ComponentSponsorSponsor {
  id: ID!
  logo: UploadFileEntityResponse
  name: String
  url: String
}

input ComponentSummitIntroSummitIntroFiltersInput {
  title: StringFilterInput
  shortDescription: StringFilterInput
  youtubeUrl: StringFilterInput
  fullDescription: StringFilterInput
  and: [ComponentSummitIntroSummitIntroFiltersInput]
  or: [ComponentSummitIntroSummitIntroFiltersInput]
  not: ComponentSummitIntroSummitIntroFiltersInput
}

input ComponentSummitIntroSummitIntroInput {
  id: ID
  title: String
  shortDescription: String
  youtubeUrl: String
  fullDescription: String
}

type ComponentSummitIntroSummitIntro {
  id: ID!
  title: String
  shortDescription: String
  youtubeUrl: String
  fullDescription: String
}

type ComponentSummitSummit {
  id: ID!
  name: String
  date: String
  background: UploadFileEntityResponse
  slogan: String
  status: String
  summitIntro: ComponentSummitIntroSummitIntro
  openingRemark: ComponentOpeningRemarkOpeningRemark
}

input ComponentUpcomingUpcomingInput {
  id: ID
  background: ID
  logo: ID
  menuTitle: String
  title: String
  intro: String
  banner: ID
  organizer: [ComponentOrganizerOrganizerInput]
  organizerIntro: String
  sponsorIntro: String
  sponsor: [ComponentSponsorSponsorInput]
  youtubeUrl: String
  description: String
}

type ComponentUpcomingUpcoming {
  id: ID!
  background: UploadFileEntityResponse
  logo: UploadFileEntityResponse
  menuTitle: String
  title: String
  intro: String
  banner: UploadFileEntityResponse
  organizer(filters: ComponentOrganizerOrganizerFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentOrganizerOrganizer]
  organizerIntro: String
  sponsorIntro: String
  sponsor(filters: ComponentSponsorSponsorFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSponsorSponsor]
  youtubeUrl: String
  description: String
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  folder: ID
  folderPath: String
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  pathId: IntFilterInput
  parent: UploadFolderFiltersInput
  children: UploadFolderFiltersInput
  files: UploadFileFiltersInput
  path: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFolderFiltersInput]
  or: [UploadFolderFiltersInput]
  not: UploadFolderFiltersInput
}

input UploadFolderInput {
  name: String
  pathId: Int
  parent: ID
  children: [ID]
  files: [ID]
  path: String
}

type UploadFolder {
  name: String!
  pathId: Int!
  parent: UploadFolderEntityResponse
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  path: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFolderEntity {
  id: ID
  attributes: UploadFolder
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input AuthorFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  email: StringFilterInput
  position: StringFilterInput
  blogs: BlogFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [AuthorFiltersInput]
  or: [AuthorFiltersInput]
  not: AuthorFiltersInput
}

input AuthorInput {
  name: String
  email: String
  position: String
  blogs: [ID]
  publishedAt: DateTime
}

type Author {
  name: String
  email: String
  position: String
  blogs(filters: BlogFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): BlogRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type AuthorEntity {
  id: ID
  attributes: Author
}

type AuthorEntityResponse {
  data: AuthorEntity
}

type AuthorEntityResponseCollection {
  data: [AuthorEntity!]!
  meta: ResponseCollectionMeta!
}

input BlogFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  author: AuthorFiltersInput
  slug: StringFilterInput
  tags: StringFilterInput
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [BlogFiltersInput]
  or: [BlogFiltersInput]
  not: BlogFiltersInput
}

input BlogInput {
  title: String
  author: ID
  image: ID
  slug: String
  tags: String
  content: String
  publishedAt: DateTime
}

type Blog {
  title: String
  author: AuthorEntityResponse
  image: UploadFileEntityResponse
  slug: String
  tags: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type BlogEntity {
  id: ID
  attributes: Blog
}

type BlogEntityResponse {
  data: BlogEntity
}

type BlogEntityResponseCollection {
  data: [BlogEntity!]!
  meta: ResponseCollectionMeta!
}

type BlogRelationResponseCollection {
  data: [BlogEntity!]!
}

enum ENUM_DOCUMENT_TYPE {
  EAFS
  EACMS
  CHCDA
}

input DocumentFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  category: ComponentCategoryCategoryFiltersInput
  type: StringFilterInput
  slug: StringFilterInput
  date: StringFilterInput
  status: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [DocumentFiltersInput]
  or: [DocumentFiltersInput]
  not: DocumentFiltersInput
}

input DocumentInput {
  name: String
  category: [ComponentCategoryCategoryInput]
  type: ENUM_DOCUMENT_TYPE
  slug: String
  date: String
  status: String
  background: ID
  publishedAt: DateTime
}

type Document {
  name: String
  category(filters: ComponentCategoryCategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentCategoryCategory]
  type: ENUM_DOCUMENT_TYPE
  slug: String
  date: String
  status: String
  background: UploadFileEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type DocumentEntity {
  id: ID
  attributes: Document
}

type DocumentEntityResponse {
  data: DocumentEntity
}

type DocumentEntityResponseCollection {
  data: [DocumentEntity!]!
  meta: ResponseCollectionMeta!
}

input HomeInput {
  slogan: String
  menu: String
  slides: [ComponentSlideSlideInput]
  publishedAt: DateTime
}

type Home {
  slogan: String
  menu: String
  slides(filters: ComponentSlideSlideFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSlideSlide]
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type HomeEntity {
  id: ID
  attributes: Home
}

type HomeEntityResponse {
  data: HomeEntity
}

input KnowledgeSharingInput {
  intro: String
  quote: String
  quoteAuthor: String
  platform: [ComponentPlatformPlatformInput]
  publishedAt: DateTime
}

type KnowledgeSharing {
  intro: String
  quote: String
  quoteAuthor: String
  platform(filters: ComponentPlatformPlatformFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentPlatformPlatform]
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type KnowledgeSharingEntity {
  id: ID
  attributes: KnowledgeSharing
}

type KnowledgeSharingEntityResponse {
  data: KnowledgeSharingEntity
}

input SettingFiltersInput {
  id: IDFilterInput
  eafsUpcomingSummit: BooleanFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [SettingFiltersInput]
  or: [SettingFiltersInput]
  not: SettingFiltersInput
}

input SettingInput {
  eafsUpcomingSummit: Boolean
  publishedAt: DateTime
}

type Setting {
  eafsUpcomingSummit: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type SettingEntity {
  id: ID
  attributes: Setting
}

type SettingEntityResponse {
  data: SettingEntity
}

type SettingEntityResponseCollection {
  data: [SettingEntity!]!
  meta: ResponseCollectionMeta!
}

enum ENUM_SUMMIT_TYPE {
  EAFS
  EACMS
  CHCDA
}

input SummitFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  date: StringFilterInput
  slogan: StringFilterInput
  status: StringFilterInput
  intro: ComponentSummitIntroSummitIntroFiltersInput
  openingRemark: ComponentOpeningRemarkOpeningRemarkFiltersInput
  session: ComponentSessionSessionFiltersInput
  type: StringFilterInput
  slug: StringFilterInput
  sponsorIntro: StringFilterInput
  organizerIntro: StringFilterInput
  organizer: ComponentOrganizerOrganizerFiltersInput
  sponsor: ComponentSponsorSponsorFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [SummitFiltersInput]
  or: [SummitFiltersInput]
  not: SummitFiltersInput
}

input SummitInput {
  name: String
  date: String
  slogan: String
  status: String
  intro: ComponentSummitIntroSummitIntroInput
  openingRemark: ComponentOpeningRemarkOpeningRemarkInput
  session: [ComponentSessionSessionInput]
  type: ENUM_SUMMIT_TYPE
  background: ID
  slug: String
  sponsorIntro: String
  organizerIntro: String
  organizer: [ComponentOrganizerOrganizerInput]
  sponsor: [ComponentSponsorSponsorInput]
  publishedAt: DateTime
}

type Summit {
  name: String
  date: String
  slogan: String
  status: String
  intro: ComponentSummitIntroSummitIntro
  openingRemark: ComponentOpeningRemarkOpeningRemark
  session(filters: ComponentSessionSessionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSessionSession]
  type: ENUM_SUMMIT_TYPE
  background: UploadFileEntityResponse
  slug: String
  sponsorIntro: String
  organizerIntro: String
  organizer(filters: ComponentOrganizerOrganizerFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentOrganizerOrganizer]
  sponsor(filters: ComponentSponsorSponsorFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSponsorSponsor]
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type SummitEntity {
  id: ID
  attributes: Summit
}

type SummitEntityResponse {
  data: SummitEntity
}

type SummitEntityResponseCollection {
  data: [SummitEntity!]!
  meta: ResponseCollectionMeta!
}

input UpcomingChcdaInput {
  content: ComponentUpcomingUpcomingInput
  publishedAt: DateTime
}

type UpcomingChcda {
  content: ComponentUpcomingUpcoming
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type UpcomingChcdaEntity {
  id: ID
  attributes: UpcomingChcda
}

type UpcomingChcdaEntityResponse {
  data: UpcomingChcdaEntity
}

input UpcomingEacmsInput {
  content: ComponentUpcomingUpcomingInput
  publishedAt: DateTime
}

type UpcomingEacms {
  content: ComponentUpcomingUpcoming
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type UpcomingEacmsEntity {
  id: ID
  attributes: UpcomingEacms
}

type UpcomingEacmsEntityResponse {
  data: UpcomingEacmsEntity
}

input UpcomingEafsInput {
  content: ComponentUpcomingUpcomingInput
  enabled: Boolean
  publishedAt: DateTime
}

type UpcomingEafs {
  content: ComponentUpcomingUpcoming
  enabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type UpcomingEafsEntity {
  id: ID
  attributes: UpcomingEafs
}

type UpcomingEafsEntityResponse {
  data: UpcomingEafsEntity
}

union GenericMorph = ComponentCategoryCategory | ComponentFileFile | ComponentOpeningRemarkOpeningRemark | ComponentOrganizerOrganizer | ComponentOrganizerSponsor | ComponentPlatformPlatform | ComponentSessionVideoVideo | ComponentSessionSession | ComponentSlideSlide | ComponentSponsorSponsor | ComponentSummitIntroSummitIntro | ComponentSummitSummit | ComponentUpcomingUpcoming | UploadFile | UploadFolder | I18NLocale | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | Author | Blog | Document | Home | KnowledgeSharing | Setting | Summit | UpcomingChcda | UpcomingEacms | UpcomingEafs

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
  author(id: ID): AuthorEntityResponse
  authors(filters: AuthorFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): AuthorEntityResponseCollection
  blog(id: ID): BlogEntityResponse
  blogs(filters: BlogFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): BlogEntityResponseCollection
  document(id: ID): DocumentEntityResponse
  documents(filters: DocumentFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): DocumentEntityResponseCollection
  home(publicationState: PublicationState = LIVE): HomeEntityResponse
  knowledgeSharing(publicationState: PublicationState = LIVE): KnowledgeSharingEntityResponse
  setting(id: ID): SettingEntityResponse
  settings(filters: SettingFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): SettingEntityResponseCollection
  summit(id: ID): SummitEntityResponse
  summits(filters: SummitFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): SummitEntityResponseCollection
  upcomingChcda(publicationState: PublicationState = LIVE): UpcomingChcdaEntityResponse
  upcomingEacms(publicationState: PublicationState = LIVE): UpcomingEacmsEntityResponse
  upcomingEafs(publicationState: PublicationState = LIVE): UpcomingEafsEntityResponse
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  updateUploadFolder(id: ID!, data: UploadFolderInput!): UploadFolderEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  createAuthor(data: AuthorInput!): AuthorEntityResponse
  updateAuthor(id: ID!, data: AuthorInput!): AuthorEntityResponse
  deleteAuthor(id: ID!): AuthorEntityResponse
  createBlog(data: BlogInput!): BlogEntityResponse
  updateBlog(id: ID!, data: BlogInput!): BlogEntityResponse
  deleteBlog(id: ID!): BlogEntityResponse
  createDocument(data: DocumentInput!): DocumentEntityResponse
  updateDocument(id: ID!, data: DocumentInput!): DocumentEntityResponse
  deleteDocument(id: ID!): DocumentEntityResponse
  updateHome(data: HomeInput!): HomeEntityResponse
  deleteHome: HomeEntityResponse
  updateKnowledgeSharing(data: KnowledgeSharingInput!): KnowledgeSharingEntityResponse
  deleteKnowledgeSharing: KnowledgeSharingEntityResponse
  createSetting(data: SettingInput!): SettingEntityResponse
  updateSetting(id: ID!, data: SettingInput!): SettingEntityResponse
  deleteSetting(id: ID!): SettingEntityResponse
  createSummit(data: SummitInput!): SummitEntityResponse
  updateSummit(id: ID!, data: SummitInput!): SummitEntityResponse
  deleteSummit(id: ID!): SummitEntityResponse
  updateUpcomingChcda(data: UpcomingChcdaInput!): UpcomingChcdaEntityResponse
  deleteUpcomingChcda: UpcomingChcdaEntityResponse
  updateUpcomingEacms(data: UpcomingEacmsInput!): UpcomingEacmsEntityResponse
  deleteUpcomingEacms: UpcomingEacmsEntityResponse
  updateUpcomingEafs(data: UpcomingEafsInput!): UpcomingEafsEntityResponse
  deleteUpcomingEafs: UpcomingEafsEntityResponse
  upload(refId: ID, ref: String, field: String, info: FileInfoInput, file: Upload!): UploadFileEntityResponse!
  multipleUpload(refId: ID, ref: String, field: String, files: [Upload]!): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Update an existing role"""
  updateUsersPermissionsRole(id: ID!, data: UsersPermissionsRoleInput!): UsersPermissionsUpdateRolePayload

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

  """Update an existing user"""
  updateUsersPermissionsUser(id: ID!, data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload

  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
